plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    namespace 'info.hannes.github.sample'
    defaultConfig {
        versionCode getGitCommitCount()
        versionName "1.0"

        minSdkVersion 21
        compileSdk propCompileSdkVersion
        targetSdkVersion 34

        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments useTestStorageService: 'true'
    }
    packagingOptions {
        resources {
            pickFirsts += ['META-INF/atomicfu.kotlin_module']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation project(':githubAppUpdate')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation 'com.google.android.material:material:1.12.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.4"
    androidTestUtil "androidx.test.services:test-services:1.5.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
